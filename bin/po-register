#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
# Copyright © 2001, 2002, 2007 Translation Project.
# Copyright © 1996, 1997, 1998, 1999, 2000 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 1996.

"""\
Process a received POT or PO file, sending out notifications to the teams,
the assigned translators, the team-leaders group, and the maintainer.

Usage:  po-register [-ntT] PACKAGE-VERSION.{pot,LL[.po]}

  -n         dry run, display what would be mailed out
  -t         display the list of known team codes and exit
  -T "list"  when processing a POT file, only notify the listed teams; the list
             of team codes should be space-separated and wrapped in quotes
"""

import os, sys, shutil
import commands, getopt, re, string

sys.path.insert(0, sys.path[0]+'/../lib')
import config, data, po, registry, messages

# Find sendmail in /usr/sbin or /usr/lib.
os.environ['PATH'] = '/usr/lib:/usr/sbin:' + os.environ['PATH']

# Unset possible localisation.
try: del os.environ['LANGUAGE']
except KeyError:pass
try: del os.environ['LANG']
except KeyError:pass

os.umask(002)


def _(text):
    return messages.MultiString(text)

# Interactive messages
def t_(text):
    return text

def uni(name):
    return unicode(name, "utf-8")

def recode(hints, name):
    try:
        u = unicode(name, "utf-8")
    except UnicodeError:
        return name
    return hints.team.encode(u)

def msgmerge(po, pot, out):
    os.system("msgmerge --no-wrap %s %s -o %s" % (po, pot, out))

def open_output():
    if run.dry:
        return sys.stdout
    else:
        return os.popen('sendmail -i -t', 'w')

def mime_charset(hints):
    if hints.team.charset:
        return hints.team.charset
    return "utf-8"

def mime_header(charset):
    return """MIME-Version: 1.0
Content-Type: text/plain;charset=%s
Content-Transfer-Encoding: 8bit
""" % charset

def underwrite(write):
    write(_("""
Thank you for all your work,

                                The Translation Project robot, in the
                                name of your translation coordinator.
                                <coordinator@translationproject.org>
"""))

class run:
    dry = 0


def main(*arguments):
    if not arguments:
        sys.stdout.write(__doc__)
        sys.exit(0)
    options, arguments = getopt.getopt(arguments, 'ntT:')
    teams = None
    for option, value in options:
        if option == '-n':
            run.dry = 1
        if option == '-t':
            print " ".join([x.name for x in registry.team_list()])
            return
        if option == '-T':
            teams = value.split()
    for name in arguments:
        if name[0] == '/':
            raise (t_("Argument '%s' may not be in absolute notation") % name)
        hints = registry.hints(name)
        sys.stderr.write(t_('Processing %s...\n') % name)
        if hints.pot:
            process_pot_file(hints, name, teams)
        else:
            process_po_file(hints, name)


# Processing of a POT file.

def process_pot_file(hints, file, teams):
    if not hints.domain.mailto and not hints.domain.nomailto:
        raise (t_("No known maintainer for textual domain '%s'")
               % hints.domain.name)
    if run.dry:
        template_path = '%s/%s-%s.pot' % (
            config.temp_path, hints.domain.name, hints.version.name)
    else:
        template_path = hints.template_path()
    template_base = hints.template_base()
    shutil.copy(file, template_path)
    if not run.dry:
        os.remove(file)
        os.chmod(template_path, 0664)
    potstats = None
    if teams:
        teams = [registry.team(n) for n in teams]
    else:
        teams = registry.team_list()
    for team in teams:
        hints.team = team
        archive_base = hints.archive_base()
        archive_path = hints.archive_path()
        maintainer_path = hints.maintainer_path()
        if os.path.isfile(archive_base):
            sys.stderr.write(t_("  skipping '%s' as local '%s' is waiting\n")
                             % (team.name, archive_base))
            continue
        if os.path.isfile(archive_path):
            sys.stderr.write(t_("  skipping '%s' as '%s' exists\n")
                             % (team.name, archive_path))
            continue
        translator = None
        if os.path.isfile(maintainer_path):
            previous = commands.getoutput("ls -l %s | sed 's,.*/,,'"
                                          % maintainer_path)
            sys.stderr.write(t_("  merging with '%s'") % previous)

            result_file = '%s/%s' % (config.temp_path, archive_base)
            msgmerge(maintainer_path, template_path, result_file)
            header = po.header(po.read(result_file))
            match = re.match('(.*) <(.*)>$', header['last-translator'])
            if match:
                name = po.decfunc(header)(match.group(1))[0]
                address = match.group(2)
                try:
                    translator = registry.translator(team, name, address)
                except KeyError:
                    pass
                else:
                    if translator.autosend:
                        if translator.mailto:
                            address = translator.mailto[0]
                        sys.stderr.write(t_("      mailing '%s' to <%s>\n")
                                         % (archive_base, address))
                        email_file(address, result_file, translator.autosend)
            process_po_file(hints, result_file, fromnewpot = True)
        elif not team.suppresspot:
            mailto = hints.team.announce_address()
            sys.stderr.write(t_("    notifying <%s> about '%s'\n")
                             % (mailto, template_base))
            if not potstats:
                potstats = po.stats(po.read(template_path))
            notify_team_for_po(hints, potstats, fromnewpot = True)
        if not translator:
            for translator in team.translator_for_domain(hints.domain):
                if translator.mailto:
                    address = translator.mailto[0]
                    if translator.autosend:
                        sys.stderr.write(t_("      mailing '%s' to <%s>\n")
                                         % (template_path, address))
                        email_file(address, template_path, translator.autosend)
    if hints.domain.mailto:
        maintainer = hints.domain.mailto[0]
        sys.stderr.write(t_("  notifying <%s> about '%s-%s.pot'\n")
                         % (maintainer, hints.domain.name, hints.version.name))
        notify_maintainer_for_pot(hints)
    sys.stderr.write(t_("    also notifying team leaders\n"))
    notify_team_leaders_for_pot(hints)


# Processing of a PO file.

def process_po_file(hints, file, fromnewpot = False):
    if not os.path.isdir('%s/%s' % (config.pos_path, hints.team.name)):
        sys.stderr.write(t_("    initializing '%s/%s'\n")
                         % (config.pos_path, hints.team.name))
        if not run.dry:
            os.mkdir('%s/%s' % (config.pos_path, hints.team.name), 0755)
    archive_base = hints.archive_base()
    archive_path = hints.archive_path()
    maintainer_path = hints.maintainer_path()
    template_path = hints.template_path()
    if registry.compare_files(archive_path, file):
        sys.stderr.write(t_("  skipping '%s', as already uploaded\n") % file)
        if not run.dry:
            os.remove(file)
        sys.exit(0)
    stats = po.stats(po.read(file))
    translated = stats['translated']
    if (translated == 0 and os.path.isfile(template_path)
        and registry.compare_files(template_path, file)):
        raise t_('Translation empty and identical to POT; not loaded\n')
    elif registry.compare_files(file, archive_path):
        raise t_('Translation identical to archive file; not loaded\n')
    if not run.dry:
        if os.path.isfile(archive_path):
            os.remove(archive_path)
        try:
            shutil.copy2(file, archive_path)
        except IOError:
            sys.stderr.write(t_("ERROR: Could not write %s\n")
                             % archive_path)
    # Notify team of the PO file, whether new or updated.
    mailto = hints.team.announce_address()
    sys.stderr.write(t_("    notifying <%s> about '%s'\n")
                     % (mailto, archive_base))
    notify_team_for_po(hints, stats, fromnewpot)
    # Only notify the maintainer (and relink the symlink) if the submitted
    # PO file is for the most recent POT file of this package.
    current_pot = data.load_postats().potstats[hints.domain.name][0]
    if (hints.domain.mailto and (not fromnewpot) and (translated > 0)
        and (registry.hints(current_pot).version == hints.version)):
        if not run.dry:
            directory = os.path.dirname(maintainer_path)
            if not os.path.isdir(directory):
                os.mkdir(directory, 0755)
            if (os.path.islink(maintainer_path)
                or os.path.isfile(maintainer_path)):
                os.remove(maintainer_path)
            elif os.path.isfile(registry.matrix):
                os.remove(registry.matrix)
            os.symlink('../../%s/%s/%s' %
                       (config.pos_dir, hints.team.name, archive_base),
                       maintainer_path)
        maintainer = hints.domain.mailto[0]
        sys.stderr.write(t_("    also notifying maintainer <%s>\n")
                         % maintainer)
        notify_maintainer_for_po(hints, file, archive_base)
    if not run.dry:
        # Calculate the statistics for the new file.
        # FIXME: Maybe put tally_po into data.py?
        response = os.popen("calc-postats "+archive_path).readlines()
        for line in response:
            print line
        os.remove(file)


# Four main types of notifications.

def notify_maintainer_for_pot(hints):
    file = open_output()
    def write(msg):
        return file.write(messages.translate(msg, 'en'))
    write(_("""\
From: Translation Project Robot <robot@translationproject.org>
To: %s
Subject: New template for '%s' made available
""")
               % (hints.domain.mailto[0], hints.domain.name))
    write('\n')
    write(messages.refill(_("""\
Hello, gentle maintainer.

This is a message from the Translation Project robot.

A new POT file for programs using the textual domain '%s' has
just been made available to the language teams for translation. 
A copy is available at:

    %s

""")
                      % (hints.domain.name, hints.template_urls()[0])))
    write(messages.refill(_("""\
In your releases this file is usually found as 'po/%s.pot'.  It is
created or updated automatically at 'make dist' time, or whenever you
run 'make update-po' in the 'po/' subdirectory.

Whenever you have a new distribution with a new version number ready,
containing a newer POT file, please send the URL of this distribution
to <translation@translationproject.org>.  The distribution may be just
a pretest or snapshot, it does not even have to compile.  It is to be
used by translators when they need to get some translation context
from your sources.

""")
                      % hints.domain.name))
    if hints.domain.url:
        write(_("""\
Here is the URL information which has just been provided to translators for
your package.  Please inform the translation coordinator, at the address
given below, if this information is not adequate or current:

"""))
        for url in hints.domain.url:
            write('    %s\n' % url)
    if hints.domain.autosend:
        write(_("""\

Translated PO files will later be automatically e-mailed to you.
"""))
    else:
        write(_("""\

We can arrange things so that translated PO files are automatically e-mailed
to you when they arrive.  Ask at the address below if you want this.
"""))
    underwrite(write)


def notify_team_leaders_for_pot(hints):
    file = open_output()
    def write(msg):
        return file.write(messages.translate(msg, 'en'))
    write(_("""\
From: Translation Project Robot <robot@translationproject.org>
To: team-leaders@iro.umontreal.ca
Subject: New PO template for '%s'
""")
               % hints.domain.name)
    write('\n')
    write(messages.refill(_("""\
My nicest hello to all language team leaders.

This is a message from the Translation Project robot.

A new POT file for programs using the textual domain '%s' has
just been made available to the language teams for translation. 
A copy is available at:

    %s

""")
                      % (hints.domain.name, hints.template_urls()[0])))
    write(_("""\
Your team will be notified only if it already committed a translation for
this domain, or if you have requested that the team be notified anyway.
Otherwise it is up to you to decide how a translator might be recruited
to take care of it.
"""))
    if hints.domain.url:
        write(_("""\

Here is some URL information that could be provided to translators
for this package:

"""))
        for url in hints.domain.url:
            write('    %s\n' % url)
    underwrite(write)


def notify_maintainer_for_po(hints, file_name, archive_base):
    file = open_output()
    def write(msg):
        return file.write(messages.translate(msg, 'en'))
    write(_("""\
From: Translation Project Robot <robot@translationproject.org>
To: %s
Subject: New %s PO file for '%s' version %s
""")
               % (hints.domain.mailto[0], _(hints.team.language),
                  hints.domain.name, hints.version))
    write('\n')
    write(messages.refill(_("""\
Hello, gentle maintainer.

This is a message from the Translation Project robot.

A revised PO file for textual domain '%s' has been submitted by
the %s team of translators.  The file is available at:

    %s

""")
                      % (hints.domain.name, _(hints.team.language),
		         hints.maintainer_urls()[0])))
    if hints.domain.autosend:
        sys.stderr.write(t_("      mailing '%s' to <%s>\n")
                         % (file_name, hints.domain.mailto[0]))
        email_file(hints.domain.mailto[0], file_name, hints.domain.autosend)
        write(_("""\
(This file, '%s', has just now been sent to you in a separate email.)
""")
                   % archive_base)
    else:
        write(_("""\
(We can arrange things so that in the future such files are automatically
e-mailed to you when they arrive.  Ask at the address below if you want this.)
"""))
    write(_("""
The following HTML page should be updated by tomorrow:

    %s/pass/domain-%s.html

Please consider including all PO files, as they stand, in the 'po/'
subdirectory of your next release, whether it is official or a pretest.

Whenever you have a new distribution with a new version number ready,
containing a newer POT file, please send the URL of this distribution
to the address below.  The distribution may be just a pretest or snapshot,
it does not even have to compile.  It is to be used by translators
when they need to get some translation context from your sources.

If any question arises, please contact the central coordinator.
""")
          % (registry.puburls[0], hints.domain.name))
    underwrite(write)


def notify_team_for_po(hints, stats, fromnewpot = False):
    file = open_output()
    charset = mime_charset(hints)
    def write(msg):
        return file.write(messages.translate(msg, hints.team.code, charset))
    def write_header(msg):
        return file.write(messages.translate(msg, hints.team.code, charset,
                                             do_Q=True))
    translated = stats['translated']
    untranslated = stats['fuzzy'] + stats['untranslated']
    percent = po.percentage(stats)
    assignee = hints.team.translator_for_domain(hints.domain)
    if fromnewpot:
        write_header(_("""\
From: Translation Project Robot <robot@translationproject.org>
To: %s
Subject: New: %s-%s (%d%%, %d untranslated)
""")
                   % (hints.team.announce_address(),
                      hints.domain.name, hints.version.name,
                      percent, untranslated))
    else:
        write_header(_("""\
From: Translation Project Robot <robot@translationproject.org>
To: %s
Subject: %s-%s (%d%%, %d untranslated) by %s
""")
                   % (hints.team.announce_address(),
                      hints.domain.name, hints.version.name,
                      percent, untranslated, assignee[0].name[0]))
    write(mime_header(charset))
    write('\n')
    if fromnewpot:
        urls = hints.template_urls()
    else:
        urls = hints.archive_urls()
    msg = _("""\
Hello, members of the %s team.

The TP-robot is happy to announce that a new PO file has been integrated
into the archives.  The file is available at:

    %s

""")    % (_(hints.team.language), urls[0])
    write(messages.refill(msg))
    if translated == 0:
        if len(assignee)>1:
            # XXX: more than two translators?
            msg = _("%s AND %s are currently assigned for the translation.  (Please report this as an error, as only one translator should be assigned to a package.)  When the translation has been completed, send the result to <robot@translationproject.org>, using the Subject line:")\
                  % (uni(assignee[0].name[0]),
                     uni(assignee[1].name[0]))
        elif len(assignee) == 1:
            msg = _("%s is currently assigned for the translation.  When the translation has been completed, send the result to <robot@translationproject.org>, using the Subject line:")\
                  % uni(assignee[0].name[0])
        elif hints.team.code in hints.domain.ext:
            import data
            extstats = data.load_extstats().get((hints.domain.name,
                                                 hints.team.code))
            msg = ""
            if extstats:
		trans = extstats['translated']
		total = trans + extstats['untranslated'] + extstats['fuzzy']
                msg = _("The most recent translation of this translator has %d of %d messages translated.") % (trans, total)
            msg = _("""
There is currently a translator working on this translation who is not
part of the Translation Project.  %s
""" % msg)
        else:
            msg = _("""\
Please consider taking upon you the translation to the %s language. 
If you decide to do this, get your team leader (if any) to inform
the translation coordinator that you were assigned to '%s'.

Once the translation is completed, send the result to
<robot@translationproject.org>, using the Subject line:""")\
                     % (_(hints.team.language), hints.domain.name)
        write(messages.refill(_("""\
None of its messages has been translated yet.  %s

    TP-Robot %s-%s.%s.po

If any question arises, you may contact either your team leader or the
central coordinator.
""")
                          % (msg,
                             hints.domain.name, hints.version.name,
                             hints.team.name)))
    elif untranslated == 0:
        write(_("""\
All of its %d messages have been translated, and this PO file has been
submitted to the maintainer of '%s', hoping he or she will include it
in a future release.
""")
                   % (translated, hints.domain.name))
    else:
        if len(assignee)>1:
            # XXX: more than two translators?
            msg = _("""
%s and %s are currently assigned for the translation.  (Please report this as an error, as only one translator should be assigned to a package.)""")\
                  % (uni(assignee[0].name[0]),
                     uni(assignee[1].name[0]))
        elif len(assignee) == 1:
            msg = _("""
%s is currently assigned for the translation.""")\
                  % uni(assignee[0].name[0])
        else:
            msg = _("""
Nobody in your team is currently assigned to the domain '%s'.  The
team leader (if any) should inform the translation coordinator of who
will become responsible for it.""")\
                  % (hints.domain.name)
        write(messages.refill(_("""\
In this file %d messages have been translated already, accounting for
%d%% of the original text size (in raw bytes).  Still %d messages need
to be attended to.
%s

Please translate the remaining messages for the benefit of users of the
%s language.  Once the translation is completed, send the result to
<robot@translationproject.org>, using the Subject line:

    TP-Robot %s-%s.%s.po

If any question arises, you may contact either your team leader or the
central coordinator.

""")
                          % (translated, percent, untranslated,
                             msg, _(hints.team.language),
                             hints.domain.name, hints.version.name,
                             hints.team.name)))
    write(_("""\
The following HTML pages should be updated by tomorrow:

    %s/pass/domain-%s.html
    %s/pass/team-%s.html
""")
               % (registry.puburls[0], hints.domain.name,
                  registry.puburls[0], hints.team.name))
    if hints.domain.url:
        write(_("""
You can find a copy of the distribution at:

"""))
        for url in hints.domain.url:
            write('    %s\n' % url)
    underwrite(write)


def email_file(address, file_name, option = None):
    file = open_output()
    def write(msg):
        return file.write(messages.translate(msg, 'en'))
    name = re.sub('.*/', '', file_name)
    if option == "compress":
        name += ".gz"
    write(_("""\
From: Translation Project Robot <robot@translationproject.org>
To: %s
Subject: Contents of PO file '%s'
""")
               % (address, name))
    write(_("""\
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="=-=-="

--=-=-=
Content-Type: application/octet-stream
Content-Disposition: attachment; filename=%s
Content-Transfer-Encoding: base64

""")
               % name)
    if option == "compress":
        write(commands.getoutput('gzip -c %s | recode ../64' % file_name))
    else:
        write(commands.getoutput('recode ../64 < %s' % file_name))
    write('\n')
    write(_("""\
--=-=-=

                                The Translation Project robot, in the
                                name of your translation coordinator.
                                <coordinator@translationproject.org>

--=-=-=--
"""))


if __name__ == '__main__':
    apply(main, tuple(sys.argv[1:]))
