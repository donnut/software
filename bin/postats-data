#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
# Copyright © 2001, 2002, 2007 Translation Project.
# Copyright © 2000 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 2000.

"""\
Adjust the database holding PO and POT file statistics.

Usage:  postats-data [-dituv] [POFILE]...

  -d  delete entries for which the PO file does not exist
  -i  re-initialise the whole database (takes very long)
  -t  re-initialise the template statistics
  -u  update the statistics for new or changed files
  -v  entertain the user by telling what's being done
"""

import os, sys, stat
import getopt, re, UserDict

sys.path.insert(0, sys.path[0]+'/../lib')
import config, data, po, registry

def main(*arguments):
    initialize = template = delete = update = verbose = 0
    options, arguments = getopt.getopt(arguments, 'dituv')
    if not arguments and not options:
        sys.stdout.write(__doc__)
        sys.exit(2)
    for option, value in options:
        if option == '-d':
            delete = 1
        elif option == '-i':
            initialize = template = 1
        elif option == '-t':
            template = 1
        elif option == '-u':
            update = 1
        elif option == '-v':
            verbose += 1
    if initialize and update:
        print "*** Option -u does not make sense together with -i"
	sys.exit(2)
    if initialize and delete:
        print "*** Option -d does not make sense together with -i"
	sys.exit(2)
    if (initialize or update) and arguments:
        print "*** Arguments are not allowed when initializing or updating"
	sys.exit(2)

    if verbose:
        print "Loading statistics file..."
    if initialize:
        postats = UserDict.UserDict()
    else:
        try:
            postats = data.load_postats()
        except:
            # Failed to load old data; start from scratch.
            postats = UserDict.UserDict()
            initialize = 1

    if initialize or update:
        if verbose:
            print "Walking..."
        os.path.walk('%s' % config.pos_path, walker, (postats, verbose))

    if delete:
        if verbose:
            print "Checking for deletions..."
        for key in postats.keys():
            domain, version, team = key
            name = registry.archive_path(domain, version, team)
            if not os.path.exists(name):
                if verbose:
                    sys.stderr.write('  deleted - %s\n' % name)
                del postats[key]

    if template:
        regenerate_potstats(postats, verbose)

    for name in arguments:
        if os.path.splitext(name)[1] == '.po':
            tally_po(postats, name, verbose, 0)
        elif os.path.splitext(name)[1] == '.pot':
            tally_POT(postats, name, verbose)
        else:
	    print "*** Not a message file:", name

    if verbose:
        print "Saving statistics file..."
    data.save_postats(postats)


def walker((postats, verbose), dirname, bases):
    if verbose:
        bases.sort()
    for base in bases:
        if os.path.splitext(base)[1] == '.po':
             tally_po(postats, '%s/%s' % (dirname, base), verbose)

def tally_po(postats, name, verbose):
    try:
        hints = registry.hints(name)
    except KeyError, e:
        sys.stderr.write("ERROR %s\n" % e)
        return
    if hints.domain and hints.version and hints.team:
        key = hints.domain.name, hints.version.name, hints.team.name
        mtime = os.stat(name)[stat.ST_MTIME]
        oldstats = postats.get(key)
        if oldstats:
            try:
                oldmtime = oldstats[6]
            except IndexError:
                pass
            else:
                if oldmtime == mtime:
                    if verbose > 1:
                        print "  same -", name
                    return 0
        if verbose:
	    if oldstats:
                print "  update -", name,
	    else:
                print "  new -", name,
        try:
            entries = po.read(name)
        except IOError:
            sys.stderr.write("UNREADABLE %s\n" % name)
            return 0
        header = po.header(entries)
        translator, mailto = header['last-translator'], None
        match = re.search('(.*[^ ]) <(.*)>', translator)
        if match:
            translator, mailto = match.group(1, 2)
        try:
            unicode(translator,"ascii")
        except UnicodeError:
            charset = None
            for f in header['content-type'].split(";"):
                f = f.strip()
                if f.startswith("charset="):
                    charset = f[8:]
            if charset:
                translator = unicode(translator, charset).encode("utf-8")
        stats = po.stats(entries)
        total = stats['translated'] + stats['untranslated'] + stats['fuzzy']
        postats[key] = (translator, mailto, stats['translated'], total,
                        stats['translated_length'], stats['total_length'],
                        mtime)
        if verbose:
            print
        return 1
    else:
        sys.stderr.write(_('%s: Not enough hints for a key\n') % name)
        return 0


def regenerate_potstats(postats, verbose):
    versions = {}
    for file in os.listdir('%s' % config.pots_path):
        try:
            hints = registry.hints(file)
        except ValueError:
            print "*** Bad filename:", file
            continue
        except KeyError:
            print "*** Unregistered package:", file
            continue
        try:
            hints.version.set_sort_key()
        except AssertionError:
            print "*** Unsortable version:", file
            continue
        try:
            oldver = versions[hints.domain.name][0]
        except KeyError:
            versions[hints.domain.name] = hints.version, file
            continue
        if hints.version > oldver:
            versions[hints.domain.name] = hints.version, file
    postats.potstats = {}
    for domain, (version, file) in versions.items():
        calculate(postats, domain, version, file, verbose)

def tally_POT(postats, file, verbose):
    try:
        hints = registry.hints(file)
    except ValueError:
        print "*** Bad filename:", file
        return
    except KeyError:
        print "*** Unregistered package:", file
        return
    try:
        hints.version.set_sort_key()
    except AssertionError:
        print "*** Unsortable version:", file
        return
    try:
        oldfile = postats.potstats[hints.domain.name][0]
        oldhints = registry.hints(oldfile)
    except:
        pass
    else:
        if hints.version < oldhints.version:
            if verbose:
                sys.stderr.write("  skipping old - %s\n" % file)
            return
    calculate(postats, hints.domain.name, hints.version, file, verbose)

def calculate(postats, domain, version, file, verbose):
    if verbose:
        sys.stderr.write("  recounting - %s... " % file)
    entries = po.read('%s/%s' % (config.pots_path, file))
    stats = po.stats(entries)
    assert stats['fuzzy'] == 0, file
    if not domain == "aegis":  # aegis.pot has translations
        assert stats['translated'] == 0, file
    postats.potstats[domain] = (file, stats['untranslated'])
    if verbose:
        sys.stderr.write("%d\n" % stats['untranslated'])


if __name__ == '__main__':
    apply(main, tuple(sys.argv[1:]))
