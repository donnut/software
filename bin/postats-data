#!/usr/bin/env python
# -*- mode: python; coding: iso-8859-1 -*-
# Copyright © 2001, 2002 Free Translation Project.
# Copyright © 2000 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 2000.

"""\
Adjust the database holding PO file statistics.

Usage: postats-data [OPTION] [POFILE]...

  -d  Delete entries for which the PO file does not exist
  -i  Re-initialise the whole database (takes very long)
  -t  Re-initialise just the template statistics
  -u  Update the statistics for new or changed files
  -v  Entertain the user by telling what goes on
"""

import os, sys, stat
import getopt, re, UserDict

sys.path.insert(0, sys.path[0]+'/../lib')
import config, data, po, registry

def main(*arguments):
    if not arguments:
        sys.stdout.write(__doc__)
        sys.exit(0)
    initialize_option = template_option = verbose_option = 0
    delete_option = update_option = 0
    options, arguments = getopt.getopt(arguments, 'dituv')
    for option, value in options:
        if option == '-d':
            delete_option = 1
        elif option == '-i':
            initialize_option = template_option = 1
        elif option == '-t':
            template_option = 1
        elif option == '-u':
            update_option = 1
        elif option == '-v':
            verbose_option += 1
    if initialize_option and update_option:
        print "Option -u does not make sense together with -i"
	sys.exit(2)
    if initialize_option and delete_option:
        print "Option -d does not make sense together with -i"
	sys.exit(2)
    if (initialize_option or update_option) and  len(arguments) > 0:
        print "No arguments allowed when initializing or updating"
	sys.exit(2)

    if initialize_option:
        postats = UserDict.UserDict()
    else:
        try:
            postats = data.load_postats()
        except:
            # Failed to load old data; start from scratch
            postats = UserDict.UserDict()
            initialize_option = 1

    if initialize_option or update_option:
        os.path.walk('%s' % config.pos_path,
                     walker, (postats, [], verbose_option, update_option))

    if delete_option:
        for key in postats.keys():
            domain, version, team = key
            name = registry.archive_path(domain, version, team)
            if not os.path.exists(name):
                if verbose_option:
                    sys.stderr.write('d - %s\n' % name)
                del postats[key]

    if template_option:
        gen_potstats(postats, [], verbose_option, update_option)

    for name in arguments:
        update(postats, [], name, verbose_option, 0)
    data.save_postats(postats)


def walker((postats, found, verbose, update_only), dirname, bases):
    if verbose:
        bases.sort()
    for base in bases:
        if os.path.splitext(base)[1] == '.po':
            changed = update(postats, found, '%s/%s' % (dirname, base),
                             verbose, update_only)
            if update_only and changed:
                # Save after each change
                data.save_postats(postats)

def update(postats, found, name, verbose, update_only):
    try:
        hints = registry.hints(name)
    except KeyError, e:
        sys.stderr.write("ERROR %s\n" % e)
        return
    if hints.domain and hints.version and hints.team:
        key = hints.domain.name, hints.version.name, hints.team.name
        found.append(key)
        mtime = os.stat(name)[stat.ST_MTIME]
        oldstats = postats.get(key)
        if oldstats:
            try:
                oldmtime = oldstats[6]
            except IndexError:
                pass
            else:
                if oldmtime == mtime:
                    if verbose>1:
                        sys.stderr.write('S - %s\n' % name)
                    return 0
        if verbose:
            sys.stderr.write('a - %s...' % name)
        try:
            entries = po.read(name)
        except IOError:
            sys.stderr.write("UNREADABLE %s\n" % name)
            return 0
        header = po.header(entries)
        translator, mailto = header['last-translator'], None
        match = re.search('(.*[^ ]) <(.*)>', translator)
        if match:
            translator, mailto = match.group(1, 2)
        try:
            unicode(translator,"ascii")
        except UnicodeError:
            charset = None
            for f in header['content-type'].split(";"):
                f = f.strip()
                if f.startswith("charset="):
                    charset = f[8:]
            if charset:
                translator = unicode(translator, charset).encode("utf-8")
        stats = po.stats(entries)
        total = stats['translated'] + stats['untranslated'] + stats['fuzzy']
        postats[key] = (translator, mailto, stats['translated'], total,
                        stats['translated_length'], stats['total_length'],
                        mtime)
        if verbose:
            sys.stderr.write('\n')
        return 1
    else:
        sys.stderr.write(_('%s: Not enough hints for a key\n') % name)
        return 0

def gen_potstats(postats, verbose):
    versions = {}
    for f in os.listdir('%s' % config.pots_path):
        try:
            h = registry.hints(f)
        except ValueError:
            continue
        except KeyError:
            print "UNREGISTERED FILE:", f
            continue
        try:
            h.version.set_sort_key()
        except AssertionError:
            print "UNREGISTERED VERSION:", f
            continue
        try:
            oldver = versions[h.domain.name][0]
        except KeyError:
            versions[h.domain.name] = h.version, f
            continue
        if h.version > oldver:
            versions[h.domain.name] = h.version, f
    postats.potstats = {}
    for domain, (version, file) in versions.items():
        if verbose:
            sys.stderr.write("%s ... " % file)
        entries = po.read('%s/%s' % (config.pots_path, file))
        stats = po.stats(entries)
        # aegis.pot has translations
        # assert stats['translated'] == 0, file
        assert stats['fuzzy'] == 0, file
        postats.potstats[domain] = (file, stats['untranslated'])
        if verbose:
            sys.stderr.write("%d\n" % stats['untranslated'])
            

if __name__ == '__main__':
    apply(main, tuple(sys.argv[1:]))
